import array

record CircularArray[T](rawContent: Array[Option[T]], head: Ref[Int], elementCount: Ref[Int])

def circular_array[T](size: Int): CircularArray[T] = 
    CircularArray[T](array(size, None()), ref(0), ref(0))

def is_full[T](circularArray: CircularArray[T]): Bool = {
    circularArray.elementCount.get() == circularArray.rawContent.size
}

def append[T](circularArray: CircularArray[T], element: T): Unit / {} = {
    val addIndex = mod(circularArray.head.get() + circularArray.elementCount.get(), circularArray.rawContent.size)

    if (circularArray.is_full) {
        circularArray.head.set(mod((circularArray.head.get() + 1), circularArray.rawContent.size))
    } else {
        circularArray.elementCount.set(circularArray.elementCount.get() + 1)
    }

    report[OutOfBounds] {
        circularArray.rawContent.set(addIndex, Some(element))
    }
}

def get[T](circularArray: CircularArray[T], index: Int): T / Exception[OutOfBounds] = {
    val value = circularArray.rawContent.unsafeGet(mod((circularArray.head.get() + index), circularArray.rawContent.size))
    value match {
        case Some(v) => v
        case None() => do raise(OutOfBounds(), "Index out of bounds: " ++ (mod((circularArray.head.get() + index), circularArray.rawContent.size).show ++ ", array size: " ++ circularArray.rawContent.size.show ++ ", element count: " ++ circularArray.elementCount.get().show))
    }
}

def popFront[T](circularArray: CircularArray[T]): Option[T] / Exception[OutOfBounds] = {
    if (circularArray.elementCount.get() == 0) {
        None()
    } else {
        val element = circularArray.get(0)
        circularArray.rawContent.unsafeSet(circularArray.head.get(), None())
        circularArray.head.set(mod((circularArray.head.get() + 1), circularArray.rawContent.size))
        circularArray.elementCount.set(circularArray.elementCount.get() - 1)

        Some(element)
    }
}

def foreachIndex[T](circularArray: CircularArray[T]){ action: (Int, T) => Unit }: Unit = {
    each(0, circularArray.elementCount.get()) { i =>
        report[OutOfBounds] {
            action(i, circularArray.get(i))
        }
    }
}