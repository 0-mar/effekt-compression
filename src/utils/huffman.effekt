import stream
import io
import io/error
import src/utils/heap
import src/utils/ascii_dictionary
import bytearray
import src/utils/stream_io
import src/utils/huffman_tree

/// Huffman block structure:
/// 
/// +----------------------------------------------+--------------------------------------+----------------------------------------+-------------------------+--------------------+----------------------------------+
/// | 4 bytes - header length (in bytes)           | 1 byte - how many bits to ignore in  | 4 bytes - number of encoded characters | Header                  | Encoded content    | 3 bits - how many bits to ignore |
/// |                                              | the last byte of the header          |                                        | serialized huffman tree |                    | before next block                |
/// |                                              |                                      |                                        |                         |                    |                                  |
/// |                                              |                                      |                                        |                         |                    |                                  |
/// +----------------------------------------------+--------------------------------------+----------------------------------------+-------------------------+--------------------+----------------------------------+
///
/// Numbers are in little endian - less significant bytes/bits first

record HeaderStreamData(serializedTree: String, contentCharacterCount: Int, headerByteLength: Int, bitsToIgnoreInLastHeaderByte: Int)
record HeaderData(root: HuffmanTree, contentCharacterCount: Int)
record ContentsData(table: AsciiDictionary[String], content: ByteArray)

///
/// Read chunk of the stream and make a character-frequency map (dictionary)
/// from it. Return the map, read chunk and its length.
/// 
def characterCompressionReader(): (AsciiDictionary[Int], Int, ByteArray) / read[Byte] = {
    var dict = emptyDict[Int]()

    val chunkSize = 4096//32768 // 2 ** 15 bytes
    val buffer = bytearray::allocate(chunkSize)
    var offset = 0

    def go(): Unit = try {
        val readByte = do read[Byte]()

        buffer.unsafeSet(offset, readByte)
        offset = offset + 1

        val result = dict.get(readByte)
        result match {
            case Some(count) => dict.update(readByte, Some(count + 1))
            case None() => dict.update(readByte, Some(1))
        }

        // read only until we have space in the buffer
        if (offset < chunkSize) {
            go()
        } else {
            ()
        }
    } with stop {
        ()
    }

    go()
    println("Read " ++ offset.show ++ " bytes (characters)")
    (dict, offset, buffer)
}

///
/// Return tuple (header length in bytes, amount of bits in the second last byte used by the tree)
/// 
def get_header_metadata(serializedTree: String): (Int, Int) = {
    var bitLength = 0
    each(0, serializedTree.length) {
        i => 
            serializedTree.unsafeCharAt(i) match {
                case '0' => bitLength = bitLength + 1
                case '1' => bitLength = bitLength + 1
                case _ => bitLength = bitLength + 8
            }
    }

    var byteLength = bitLength / 8
    var leftovers = mod(bitLength, 8)
    if (leftovers > 0) {
        byteLength = byteLength + 1
    }
    
    println("Header bit length: " ++ bitLength.show)
    println("Header byte length: " ++ byteLength.show)
    println("Bits to ignore in the last header byte (padding): " ++ (8 - leftovers).show)
    (byteLength, 8 - leftovers)
}


def treeStream(serializedTree: String) = {
    each(0, serializedTree.length) {
        i => 
            serializedTree.unsafeCharAt(i) match {
                case '0' => do writeBit(false)
                case '1' => do writeBit(true)
                case char => do writeByte(char.toInt.toByte)
            }
    }

    /*var idx = 0
    loop { {l} =>
        if (idx >= serializedTree.length) {
            l.break()
        }

        serializedTree.unsafeCharAt(idx) match {
            case '0' => do writeBit(false)
            case '1' => do writeBit(true)
            case '|' => 
                idx = idx + 1
                var digit = serializedTree.unsafeCharAt(idx)
                var result = ""
                while (not(digit == '|')) {
                    result = result ++ digit.toString
                    idx = idx + 1
                    var digit = serializedTree.unsafeCharAt(idx)
                    ()
                }
                idx = idx + 1
                var convertedNum = result.unsafeToInt
                // report[WrongFormat] {
                //     convertedNum = string::toInt(result, 10)
                // }

                do writeByte(convertedNum.toByte)
        }

        idx = idx + 1
    }*/
}

def writeHeaderStream(data: HeaderStreamData) = {
    integerToBytesStream(data.headerByteLength)
    //numberToBitsStream(data.bitsToIgnoreInLastHeaderByte, 3)
    do writeByte(data.bitsToIgnoreInLastHeaderByte.toByte)
    integerToBytesStream(data.contentCharacterCount)

    treeStream(data.serializedTree)
    do flush()  // bit padding before the content
}

def writeCodeStream(code: String) = {
    each(0, code.length) {
        i => 
            code.unsafeCharAt(i) match {
                case '0' => do writeBit(false)
                case '1' => do writeBit(true)
                case _ => ()
            }
    }
}

def writeContentsStream(contentsData: ContentsData) = {
    var bitLength = 0
    contentsData.content.foreach() {
        byte => 
            var value = contentsData.table.unsafeGet(byte)
            value match {
                case Some(code) => 
                    println("Character: " ++ byte.toInt.toChar.show ++ " as Code: " ++ code)
                    bitLength = bitLength + code.length
                    writeCodeStream(code)
                case None() => ()
            }
    }

    bitLength = bitLength + 3  // 3 bits to store number of bits to ignore in the last byte
    val leftovers = mod(bitLength, 8)
    numberToBitsStream(8 - leftovers, 3)
    println("Content bits written: " ++ bitLength.show)
    println("Bits to ignore in the last byte: " ++ (8 - leftovers).show)
}


def get_header_stream_data(headerData: HeaderData): HeaderStreamData = {
    val serializedTree = huffman_serialize(headerData.root)
    println("Serialized tree: " ++ serializedTree)
    val (byteLength, bitsToIgnoreInLastHeaderByte) = get_header_metadata(serializedTree)

    HeaderStreamData(serializedTree, headerData.contentCharacterCount, byteLength, bitsToIgnoreInLastHeaderByte)
}

def writeCompressedStream(headerData: HeaderData, contentsData: ContentsData) = {
    val headerStreamData = get_header_stream_data(headerData)

    streamWriter {
        writeHeaderStream(headerStreamData)
        writeContentsStream(contentsData)
    }
}

def compressReaderIntoStream() = {
    loop { {l} =>
        println("Starting Huffman block compression...")
        val (frequencyMap, byteCount, readData) = characterCompressionReader()
        if (byteCount == 0) {
            // no more data to read => we are done
            println("No more data to read, terminating compression")
            l.break()
        } else {
            val root = build_tree(frequencyMap)
            val huffmanCodesTable = huffmanCodes(root)

            writeCompressedStream(HeaderData(root, byteCount), ContentsData(huffmanCodesTable, readData))

            println("Huffman block compression successful")
        }
    }
}

/// ********************* \\\
///     DECOMPRESSION     \\\
/// ********************* \\\

def headerReader() = {
    val headerByteLength = bytesToIntegerReader()
    println("Header byte length: " ++ headerByteLength.show)

    //val bitsToIgnoreInLastHeaderByte = bitsToNumberReader(3)
    val bitsToIgnoreInLastHeaderByte = (do readByte()).toInt
    println("Bits to ignore in last header byte: " ++ bitsToIgnoreInLastHeaderByte.show)

    val contentCharacterCount = bytesToIntegerReader()
    println("Content character count: " ++ contentCharacterCount.show)

    val headerBitLength = (headerByteLength * 8) - bitsToIgnoreInLastHeaderByte
    println("Header bit length: " ++ headerBitLength.show)

    var bitCounter = 0
    var serializedTree = ""

    while (bitCounter < headerBitLength) {
        val bit = do readBit()
        bit match {
            case true => 
                //serializedTree = serializedTree ++ "1|"
                serializedTree = serializedTree ++ "1"
                val char = do readByte()
                serializedTree = serializedTree ++ char.toInt.toChar.toString
                //serializedTree = serializedTree ++ char.toInt.toString ++ "|"
                bitCounter = bitCounter + 8
            case false => serializedTree = serializedTree ++ "0"
        }
        bitCounter = bitCounter + 1
    }

    println("Serialized tree: " ++ serializedTree)

    // skip the padding bits
    repeat(bitsToIgnoreInLastHeaderByte) {
        val _ = do readBit()
        ()
    }

    HeaderData(huffman_deserialize(serializedTree), contentCharacterCount)
}

def readContentsStream(headerData: HeaderData) = {
    var characterCounter = 0

    while (characterCounter < headerData.contentCharacterCount) {
        //println("----> Reading character " ++ characterCounter.show)
        var node = headerData.root
        var done = false

        while (not(done)) {
            node match {
                case Leaf(char, _) => 
                    do writeByte(char)
                    done = true
                    //println("Character: " ++ char.toInt.toChar.show)
                case Node(_, l, r) => 
                    val bit = do readBit()
                    /*if (bit) {
                        println("1")
                    } else {
                        println("0")
                    }*/
                    node = if (bit) r else l
            }
        }

        characterCounter = characterCounter + 1
    }

    val bitsToIgnore = bitsToNumberReader(3)
    // skip the padding bits
    repeat(bitsToIgnore) {
        val _ = do readBit()
        ()
    }
}

def decompressBlock() = {
    with streamReader
    with streamWriter

    val headerData = headerReader()
    //println("Header read: " ++ headerData.contentCharacterCount.show)
    readContentsStream(headerData)
}

def decompressReaderIntoStream() = {
    loop { {l} =>
        println("Starting Huffman block decompression...")
        try {
            decompressBlock()

            println("Huffman block decompression successful")
        } with stop {
            println("No more data to read, terminating decompression")
            l.break()
        }
    }
}