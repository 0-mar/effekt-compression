import stream

/*
 * Utility functions for reading and writing bits and bytes.
 */

/// Make a bit mask that has 1s from fromBit to toBit
def makeBitMask(fromBit: Int, toBit: Int): Int = {
    var result = 0.0
    each (fromBit, toBit) {
        exp =>
            result = result + pow(2.0, exp.toDouble)
    }
    result.toInt
}

/// Object representing bit/byte writing operations.
interface StreamWriter {
    def writeBit(bit: Bool): Unit / emit[Byte]
    def writeByte(byte: Byte): Unit / emit[Byte]
    def flush(): Unit / emit[Byte]
}

/// Handler for StreamWriter interface.
/// Keeps an internal buffer for writing bits and bytes, so no data is lost.
/// At the end of the writing, flush (emit) the buffer.
def streamWriter { prog: => Unit / StreamWriter }: Unit / emit[Byte] = {
    var buffer = 0
    var bitCount = 0

    try { 
        prog()
        do flush()
    } with StreamWriter {

        def writeBit(bit: Bool) = {
            resume {
                bitCount = bitCount + 1

                bit match {
                    case true => buffer = bitwiseOr(buffer, bitwiseShl(1, 8 - bitCount))
                    case _ => ()
                }

                if (bitCount == 8) {
                    do emit[Byte](buffer.toByte)
                    buffer = 0
                    bitCount = 0
                } else {
                    ()
                }
            }
        }

        def writeByte(byte: Byte) = {
            resume {
                if (bitCount == 0) {
                    do emit[Byte](byte) 
                } else {
                    val intByte = byte.toInt
                    val freeBits = 8 - bitCount

                    val bufferPart = bitwiseShr(intByte, bitCount)
                    buffer = bitwiseOr(buffer, bufferPart)
                    do emit[Byte](buffer.toByte)

                    buffer = bitwiseShl(bitwiseAnd(intByte, makeBitMask(0, bitCount)) ,freeBits)
                }
            }

        }

        def flush() = {
            resume {
                if (bitCount > 0) {
                    do emit[Byte](buffer.toByte)
                    buffer = 0
                    bitCount = 0
                } else {
                    ()
                }

            }
        }
    }
}

///
/// Output an integer as stream of 4 bytes in little endian. (Less significant byte first)
/// 
def integerToBytesStream(integer: Int) = {
    val byte1_mask = 4278190080
    val byte1 = bitwiseShr(bitwiseAnd(integer, byte1_mask), 24).toByte

    val byte2_mask = 16711680
    val byte2 = bitwiseShr(bitwiseAnd(integer, byte2_mask), 16).toByte

    val byte3_mask = 65280
    val byte3 = bitwiseShr(bitwiseAnd(integer, byte3_mask), 8).toByte

    val byte4_mask = 255
    val byte4 = bitwiseAnd(integer, byte4_mask).toByte
    
    do writeByte(byte4)
    do writeByte(byte3)
    do writeByte(byte2)
    do writeByte(byte1)
}

///
/// Output an number as stream of bits in little endian (Less significant byte first).
/// Specify how many bits of the number to output. In case the number has less bits,
/// pad it with zeroes.
/// 
def numberToBitsStream(number: Int, bitsToWrite: Int) = {
    var processedNumber = number
    each (0, bitsToWrite) { _ =>
        val bit = mod(processedNumber, 2)
        if (bit == 1) {
            do writeBit(true)
        } else {
            do writeBit(false)
        }

        processedNumber = processedNumber / 2
    }
}

/// Object representing bit/byte reading operations
interface StreamReader {
    def readBit(): Bool / read[Byte]
    def readByte(): Byte / read[Byte]
}

/// Handler for StreamReader interface.
/// Keeps an internal buffer for reading bits and bytes, so no data is lost.
def streamReader { prog: => Unit / StreamReader }: Unit / {read[Byte], stop} = {
    var buffer = 0
    var curBit = 0
    var readBits = 0

    try { 
        prog()
    } with StreamReader {
        def readBit() = {
            resume {
                if (curBit <= 0) {
                    val readByte = do read[Byte]
                    buffer = readByte.toInt
                    curBit = 128
                    readBits = 0
                }

                val result = bitwiseAnd(buffer, curBit)
                curBit = bitwiseShr(curBit, 1)
                readBits = readBits + 1

                if (result > 0) {
                    true
                } else {
                    false
                }
            }
        }

        def readByte() = {
            resume {
                if (readBits == 0) {
                    do read[Byte]
                } else {
                    val readByte = do read[Byte]

                    val newBuffer = readByte.toInt
                    val unreadBits = 8 - readBits

                    val bytePart1 = bitwiseShl(bitwiseAnd(buffer, makeBitMask(0, unreadBits)), readBits)
                    val bytePart2 = bitwiseShr(newBuffer, unreadBits)
                    buffer = newBuffer

                    bitwiseOr(bytePart1, bytePart2).toByte
                }
            }
        }
    }
}

/// Read an integer (4 bytes) from the stream of bytes.
def bytesToIntegerReader() = {
    val byte4 = do readByte()
    val byte3 = do readByte()
    val byte2 = do readByte()
    val byte1 = do readByte()

    bitwiseShl(byte1.toInt, 24) + bitwiseShl(byte2.toInt, 16) + bitwiseShl(byte3.toInt, 8) + byte4.toInt  
}

/// Read an integer from the stream of bits.
/// Specify how many bits to read.
def bitsToNumberReader(bitsToRead: Int) = {
    var result = 0.0
    each (0, bitsToRead) {
        exp =>
            val bit = do readBit()
            if (bit) {
                result = result + pow(2.0, exp.toDouble)
            }
    }
    result.toInt
}