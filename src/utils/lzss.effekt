import src/utils/circular_array
import stream
import io
import io/error
import src/utils/stream_io

def init_look_ahead_buffer(lookAheadBuffer: CircularArray[Byte]) = {
    val lookAheadBufferSize = lookAheadBuffer.rawContent.size

    repeat (lookAheadBufferSize) {
        lookAheadBuffer.append(do readByte())
    }
}

def find_longest_match(processedByte: Byte, searchBuffer: CircularArray[Byte], lookAheadBuffer: CircularArray[Byte]) = {
    // keeps track of the back-offset in the search buffer
    var offsetCounter = searchBuffer.elementCount.get()
    var maxMatchLength = 0
    var maxMatchOffset = 0

    searchBuffer.foreachIndex { (i, searchBufferElement) =>

        // find the longest matching byte sequence starting at the index i
        if (searchBufferElement.toInt == processedByte.toInt) {
            var matchLength = 1

            var lookAheadBufferIdx = 0
            var searchBufferIdx = i + 1

            // println("Offset counter: " ++ offsetCounter.show)

            loop { {l} =>
                if (lookAheadBufferIdx >= lookAheadBuffer.elementCount.get() || searchBufferIdx >= searchBuffer.elementCount.get()) {
                    l.break()
                }

                // println("Look-ahead buffer idx: " ++ lookAheadBufferIdx.show ++ ", search buffer idx: " ++ searchBufferIdx.show ++ ", match-length: " ++ matchLength.show)

                val searchBufferMatchElement = searchBuffer.get(searchBufferIdx)
                val lookAheadBufferElement = lookAheadBuffer.get(lookAheadBufferIdx)
                // println("SearchBufferMatchElement: " ++ searchBufferMatchElement.show ++ ", LookAheadBufferElement: " ++ lookAheadBufferElement.show)

                if (searchBufferMatchElement.toInt == lookAheadBufferElement.toInt) {
                    matchLength = matchLength + 1
                } else {
                    l.break()
                }

                lookAheadBufferIdx = lookAheadBufferIdx + 1
                searchBufferIdx = searchBufferIdx + 1
            }


            if (matchLength > maxMatchLength) {
                // println("Match length was " ++ maxMatchLength.show ++ ", changing to " ++ matchLength.show)
                maxMatchLength = matchLength
                maxMatchOffset = offsetCounter
            }
            // println("---------------------------------------")
        }

        offsetCounter = offsetCounter - 1
    }

    if (maxMatchLength < 3) {
        (0, 0)
    } else {
        (maxMatchOffset, maxMatchLength)
    }
}

def show(c: CircularArray[Byte]) = {
    var result = "["
    c.foreachIndex { (i, e) =>
        // println(i.show ++ ": " ++ e.show)
        val value = e.toInt.toChar.toString
        result = result ++ value ++ ", "
    }

    result = result ++ "]"
    result
}

def compressReaderIntoStream(): Unit / { emit[Byte], read[Byte]} = {
    with streamWriter
    with on[OutOfBounds].report

    println("Starting LZSS compression...")
    
    val searchBufferSize = 4096
    val lookAheadBufferSize = 18

    val searchBuffer = circular_array[Byte](searchBufferSize)
    val lookAheadBuffer = circular_array[Byte](lookAheadBufferSize)

    var processedByte = 42.toByte
    var hasContent = true

    
    try {
        streamReader {
            processedByte = do readByte()
        }
    } with stop {
        hasContent = false
    }

    try {
        streamReader {
            init_look_ahead_buffer(lookAheadBuffer)
        }
    } with stop {
        ()
    }


    if (hasContent){
        loop { {l} =>
            println("Search buffer: " ++ show(searchBuffer))
            println("Processed byte: " ++ processedByte.toInt.toChar.toString)
            println("Look-ahead buffer: " ++ show(lookAheadBuffer))

            val (matchOffset, matchLength) = find_longest_match(processedByte, searchBuffer, lookAheadBuffer)
            //println("Match offset: " ++ matchOffset.show ++ ", match length: " ++ matchLength.show)

            searchBuffer.append(processedByte)

            if (matchLength == 0) {
                // we will emit the byte itself with a 0 flag
                do writeBit(false)
                do writeByte(processedByte)
            } else {
                //println("Currently processed byte:" ++ processedByte.toInt.toChar.toString)
                println("Writing match offset: " ++ matchOffset.show)
                // emit the offset and length of the match with a leading 1 flag
                do writeBit(true)

                // we need to subtract 1 from the offset because offset indexing starts at 1 (or at element count of search buffer)
                // In case of offset being 4096, it wouldnt fit into 12 bits
                numberToBitsStream(matchOffset - 1, 12)
                numberToBitsStream(matchLength - 3, 4)
            }

            if(not(matchLength == 0)) {
                // matchLength - 1 because of the processed byte
                repeat (matchLength - 1) {
                    val value = lookAheadBuffer.popFront()
                    value match {
                        case Some(v) => searchBuffer.append(v)
                        case None() => panic("Fatal error, look-ahead buffer should contain matched bytes")
                    }
                }

                // fill up the look-ahead buffer with new bytes
                try {
                    repeat (matchLength - 1) {
                        streamReader {
                            lookAheadBuffer.append(do readByte())
                        }
                    }
                } with stop {
                    ()
                }
            }

            // break the loop if there are no new characters to read
            val value = lookAheadBuffer.popFront()
            value match {
                case Some(v) => processedByte = v
                case None() => l.break()
            }

            // fill one byte to the lookAheadBuffer for the popped one
            try {
                streamReader {
                    lookAheadBuffer.append(do readByte())
                }
            } with stop {
                ()
            }
            println("--------------------------------------------")
        }
    } else {
        ()
    }


    println("Compression was successful")
}

/// ********************* \\\
///     DECOMPRESSION     \\\
/// ********************* \\\

def stopHandler() {prog: => Unit / stop} = {
    try {
        prog()
    } with stop {
        println("Decompression was successful")
    }
}

def decompressReaderIntoStream() = {
    with stopHandler
    with streamReader
    with streamWriter
    with on[OutOfBounds].report

    println("Starting LZSS decompression...")

    val searchBufferSize = 4096
    val searchBuffer = circular_array[Byte](searchBufferSize)

    loop { {l} =>
        var flag = do readBit()
        if (flag) {
            var offset = bitsToNumberReader(12) + 1
            var length = bitsToNumberReader(4) + 3

            val start = searchBuffer.elementCount.get() - offset
            val end = start + length

            each (start, end) { i =>
                val byte = searchBuffer.get(i)
                do writeByte(byte)
                searchBuffer.append(byte)
            }

        } else {
            val byte = do readByte()
            do writeByte(byte)
            searchBuffer.append(byte)
        }
    }
}